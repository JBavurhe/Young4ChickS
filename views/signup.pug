doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  title Register
  // Favicon
  link(rel='apple-touch-icon' sizes='180x180' href='/assets/Favicon/apple-touch-icon.png')
  link(rel='icon' type='image/png' sizes='32x32' href='/assets/Favicon/favicon-32x32.png')
  link(rel='icon' type='image/png' sizes='16x16' href='/assets/Favicon/favicon-16x16.png')
  link(rel='manifest' href='/assets/Favicon/site.webmanifest')
  // Fonts + Bootstrap + Icons
  link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css')
  link(href='https://fonts.googleapis.com/css?family=Quicksand:400,600,700&display=swap' rel='stylesheet')
  link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css' rel='stylesheet')
  style.
    body {
    font-family: "Quicksand", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    font-weight: 600;
    background-image: url('/assets/images/chicks2.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    
    }
    .card {
    border-radius: 16px;
    border: none;
    background-color: #fff;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    }
    .form-label {
    font-weight: 500;
    }
    .input-group {
    border-radius: 12px;
    
    }
    .input-group-text {
    background-color: #f9fafb;
    border-right: 0;
    }
    input:focus,
    select:focus,
    textarea:focus {
    border-color: #f5b041 !important;
    box-shadow: 0 0 0 0.2rem #f5d9ac !important;
    outline: none;
    }
    .form-control {
    background-color: #f9fafb;
    border-left: 0;
    }
    .input-group .form-control:focus {
    box-shadow: none;
    border-color: #4f46e5;
    }
    .invalid-feedback {
    font-size: 0.875rem;
    }
    .btn-primary {
    background-color: #e67e22;
    border-radius: 12px;
    border: none;
    font-weight: 600;
    }
    .btn-primary:hover {
    background-color: #d35400;
    }
    .btnlog {
    background-color: #e67e22;
    color: white;
    }
    .btnlog:hover {
    background-color: #d35400;
    color: white;
    }
.container.py-5
  .card.p-4.mx-auto(style='max-width: 500px;')
    .text-center.mb-4
      a.text-decoration-none(href='/')
        img(src='/assets/images/logo/horizontal logo.png' height='50' alt='Logo')
        p.mt-2.text-muted Register to get started
    form#registerForm(action='/signup' method='post' novalidate='')
      // Full Name
      .mb-3
        label.form-label(for='fullName') Full Name
        .input-group
          span.input-group-text
            i.fa.fa-user
          input#fullName.form-control(type='text' name='fullname' placeholder='Enter your full name' required='')
          .invalid-feedback Full name is required.
      // Age
      .mb-3
        label.form-label(for='age') Age
        .input-group
          span.input-group-text
            i.fa.fa-calendar
          input#age.form-control(type='number' name='age' placeholder='Enter your age' min='20' max='30' required='')
          .invalid-feedback Age should be between 20 and 30 years.
      // Gender
      .mb-3
        label.form-label(for='gender') Gender
        .input-group
          span.input-group-text
            i.fa.fa-venus-mars
          select#gender.form-select(name='gender' required='')
            option(value='' selected='' disabled='') --Select Gender--
            option Male
            option Female
            option Other
          .invalid-feedback Please select your gender.
      // NIN
      .mb-3
        label.form-label(for='nin') National ID Number
        .input-group
          span.input-group-text
            i.fa.fa-id-card
          input#nin.form-control(type='text' name='nin' placeholder='Enter your NIN' required='')
          .invalid-feedback NIN is required.
      // Phone
      .mb-3
        label.form-label(for='phone') Phone Number
        .input-group
          span.input-group-text
            i.fa.fa-phone
          input#phone.form-control(type='tel' name='phone' placeholder='07xxxxxxxx' pattern='07[0-9]{8}' required='')
          .invalid-feedback Phone number is required.
      // Location
      .mb-3
        label.form-label(for='location') District / Location
        .input-group
          span.input-group-text
            i.fa.fa-map-marker-alt
          input#location.form-control(type='text' name='location' placeholder='Enter your location' required='')
          .invalid-feedback Location is required.
      // Email
      .mb-3
        label.form-label(for='email') Email Address (optional)
        .input-group
          span.input-group-text
            i.fa.fa-envelope
          input#email.form-control(type='email' name='email' placeholder='your@email.com')
          .invalid-feedback Please enter a valid email.
      // Role
      .mb-3
        label.form-label(for='role') Role
        .input-group
          span.input-group-text
            i.fa.fa-user-tag
          select#role.form-select(name='role' required='')
            option(value='') --Select your role--
            option(value='brooderManager') Brooder Manager
            option(value='farmer') Farmer
            option(value='salesRep') Sales Rep
          .invalid-feedback Please select your role.
      // Farmer-only fields
      #farmerFields.d-none
        // Recommender Name
        .mb-3
          label.form-label(for='recommenderName') Recommender&apos;s Name
          .input-group
            span.input-group-text
              i.fa.fa-user-friends
            input#recommenderName.form-control(type='text' name='recommenderName' placeholder="Enter recommender's name")
            .invalid-feedback Recommender&apos;s name is required.
        // Recommender NIN
        .mb-3
          label.form-label(for='recommenderNin') Recommender&apos;s NIN
          .input-group
            span.input-group-text
              i.fa.fa-id-badge
            input#recommenderNin.form-control(type='text' name='recommenderNin' placeholder="Enter recommender's NIN")
            .invalid-feedback Recommender&apos;s NIN is required.
      // Password
      .mb-3.position-relative
        label.form-label(for='password') Password
        .input-group
          span.input-group-text
            i.fa.fa-lock
          input#password.form-control(type='password' name='password' placeholder='Enter password' minlength='8' required='')
          .invalid-feedback Must be at least 8 characters long.
      // Confirm Password
      .mb-4.position-relative
        label.form-label(for='confirmPassword') Confirm Password
        .input-group
          span.input-group-text
            i.fa.fa-lock
          input#confirmPassword.form-control(type='password' name='confirmPassword' placeholder='Re-enter password' minlength='8' required='')
          .invalid-feedback Passwords do not match.
      button.btn.btn-primary.w-100(type='submit') Register
// Scripts
script.
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('registerForm');
    const roleSelect = document.getElementById('role');
    const farmerFields = document.getElementById('farmerFields');
    const password = document.getElementById('password');
    const confirmPassword = document.getElementById('confirmPassword');
    const recommenderName = document.getElementById('recommenderName');
    const recommenderNin = document.getElementById('recommenderNin');

    // Show/hide farmer fields when role is selected
    roleSelect.addEventListener('change', () => {
      if (roleSelect.value === 'farmer') {
        farmerFields.classList.remove('d-none');
        recommenderName.setAttribute('required', 'true');
        recommenderNin.setAttribute('required', 'true');
      } else {
        farmerFields.classList.add('d-none');
        recommenderName.removeAttribute('required');
        recommenderNin.removeAttribute('required');
        
      }
    });

    // If the form opens with 'farmer' already selected (e.g., editing or reload)
    if (roleSelect.value === 'farmer') {
      roleSelect.dispatchEvent(new Event('change'));
    }

    // Confirm password validation
    confirmPassword.addEventListener('input', () => {
      confirmPassword.setCustomValidity(
        confirmPassword.value !== password.value ? "Passwords don't match" : ''
      );
    });

    // Trim some inputs before submit
    form.addEventListener('submit', (e) => {
      const trimIds = [
        'fullName', 'nin', 'phone', 'email', 'location',
        'recommenderName', 'recommenderNin'
      ];

      trimIds.forEach(id => {
        const input = document.getElementById(id);
        if (input && input.value) {
          input.value = input.value.trim();
        }
      });

      // Bootstrap validation
      if (!form.checkValidity()) {
        e.preventDefault();
        e.stopPropagation();
      }

      form.classList.add('was-validated');
    });
  });
  

